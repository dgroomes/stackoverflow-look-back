[
  {
    "type": "question",
    "id": 171251,
    "htmlBody": "<p>I need to be able to merge two (very simple) JavaScript objects at runtime.  For example I'd like to:</p>\n\n<pre><code>var obj1 = { food: 'pizza', car: 'ford' }\nvar obj2 = { animal: 'dog' }\n\nobj1.merge(obj2);\n\n//obj1 now has three properties: food, car, and animal\n</code></pre>\n\n<p>Does anyone have a script for this or know of a built in way to do this?  I do not need recursion, and I do not need to merge functions, just methods on flat objects.</p>\n",
    "title": "How can I merge properties of two JavaScript objects dynamically?"
  },
  {
    "type": "answer",
    "id": 171256,
    "htmlBody": "<p><strong>ECMAScript 2018 Standard Method</strong></p>\n<p>You would use <a href=\"https://github.com/tc39/proposal-object-rest-spread\" rel=\"noreferrer\">object spread</a>:</p>\n<pre><code>let merged = {...obj1, ...obj2};\n</code></pre>\n<p><code>merged</code> is now the union of <code>obj1</code> and <code>obj2</code>. Properties in <code>obj2</code> will overwrite those in <code>obj1</code>.</p>\n<pre><code>/** There's no limit to the number of objects you can merge.\n *  Later properties overwrite earlier properties with the same name. */\nconst allRules = {...obj1, ...obj2, ...obj3};\n</code></pre>\n<p>Here is also the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">MDN documentation</a> for this syntax. If you're using babel you'll need the <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-object-rest-spread.html\" rel=\"noreferrer\">babel-plugin-transform-object-rest-spread</a> plugin for it to work.</p>\n<p><strong>ECMAScript 2015 (ES6) Standard Method</strong></p>\n<pre><code>/* For the case in question, you would do: */\nObject.assign(obj1, obj2);\n\n/** There's no limit to the number of objects you can merge.\n *  All objects get merged into the first object. \n *  Only the object in the first argument is mutated and returned.\n *  Later properties overwrite earlier properties with the same name. */\nconst allRules = Object.assign({}, obj1, obj2, obj3, etc);\n</code></pre>\n<p>(see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility\" rel=\"noreferrer\">MDN JavaScript Reference</a>)</p>\n<hr />\n<p><strong>Method for ES5 and Earlier</strong></p>\n<pre><code>for (var attrname in obj2) { obj1[attrname] = obj2[attrname]; }\n</code></pre>\n<p>Note that this will simply add all attributes of <code>obj2</code> to <code>obj1</code> which might not be what you want if you still want to use the unmodified <code>obj1</code>.</p>\n<p>If you're using a framework that craps all over your prototypes then you have to get fancier with checks like <code>hasOwnProperty</code>, but that code will work for 99% of cases.</p>\n<p>Example function:</p>\n<pre><code>/**\n * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1\n * @param obj1\n * @param obj2\n * @returns obj3 a new object based on obj1 and obj2\n */\nfunction merge_options(obj1,obj2){\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n}\n</code></pre>\n",
    "questionId": 171251
  },
  {
    "type": "answer",
    "id": 256225,
    "htmlBody": "<p><sup><em>Rewrite of a now-deleted <a href=\"https://stackoverflow.com/a/255939/\">answer</a> by <a href=\"https://stackoverflow.com/users/6309/vonc\">VonC</a>.</em></sup></p>\n\n<p><a href=\"https://stackoverflow.com/a/255913/417685\">Robert Gamble</a>'s succinct answer deals directly with the question.\nThis one amplifies on some issues with filenames containing spaces.</p>\n\n<p>See also: <a href=\"https://stackoverflow.com/questions/154625/1-in-binsh\">${1:+\"$@\"} in /bin/sh</a></p>\n\n<p><strong>Basic thesis:</strong> <code>\"$@\"</code> is correct, and <code>$*</code> (unquoted) is almost always wrong.\nThis is because <code>\"$@\"</code> works fine when arguments contain spaces, and\nworks the same as <code>$*</code> when they don't.\nIn some circumstances, <code>\"$*\"</code> is OK too, but <code>\"$@\"</code> usually (but not\nalways) works in the same places.\nUnquoted, <code>$@</code> and <code>$*</code> are equivalent (and almost always wrong).</p>\n\n<p>So, what is the difference between <code>$*</code>, <code>$@</code>, <code>\"$*\"</code>, and <code>\"$@\"</code>?  They are all related to 'all the arguments to the shell', but they do different things. When unquoted, <code>$*</code> and <code>$@</code> do the same thing.  They treat each 'word' (sequence of non-whitespace) as a separate argument.  The quoted forms are quite different, though: <code>\"$*\"</code> treats the argument list as a single space-separated string, whereas <code>\"$@\"</code> treats the arguments almost exactly as they were when specified on the command line.\n<code>\"$@\"</code> expands to nothing at all when there are no positional arguments; <code>\"$*\"</code> expands to an empty string &mdash; and yes, there's a difference, though it can be hard to perceive it.\nSee more information below, after the introduction of the (non-standard) command <code>al</code>.</p>\n\n<p><strong>Secondary thesis:</strong> if you need to process arguments with spaces and then\npass them on to other commands, then you sometimes need non-standard\ntools to assist. (Or you should use arrays, carefully: <code>\"${array[@]}\"</code> behaves analogously to <code>\"$@\"</code>.)</p>\n\n<p><em>Example:</em></p>\n\n<pre><code>    $ mkdir \"my dir\" anotherdir\n    $ ls\n    anotherdir      my dir\n    $ cp /dev/null \"my dir/my file\"\n    $ cp /dev/null \"anotherdir/myfile\"\n    $ ls -Fltr\n    total 0\n    drwxr-xr-x   3 jleffler  staff  102 Nov  1 14:55 my dir/\n    drwxr-xr-x   3 jleffler  staff  102 Nov  1 14:55 anotherdir/\n    $ ls -Fltr *\n    my dir:\n    total 0\n    -rw-r--r--   1 jleffler  staff  0 Nov  1 14:55 my file\n\n    anotherdir:\n    total 0\n    -rw-r--r--   1 jleffler  staff  0 Nov  1 14:55 myfile\n    $ ls -Fltr \"./my dir\" \"./anotherdir\"\n    ./my dir:\n    total 0\n    -rw-r--r--   1 jleffler  staff  0 Nov  1 14:55 my file\n\n    ./anotherdir:\n    total 0\n    -rw-r--r--   1 jleffler  staff  0 Nov  1 14:55 myfile\n    $ var='\"./my dir\" \"./anotherdir\"' &amp;&amp; echo $var\n    \"./my dir\" \"./anotherdir\"\n    $ ls -Fltr $var\n    ls: \"./anotherdir\": No such file or directory\n    ls: \"./my: No such file or directory\n    ls: dir\": No such file or directory\n    $\n</code></pre>\n\n<p>Why doesn't that work?\nIt doesn't work because the shell processes quotes before it expands\nvariables.\nSo, to get the shell to pay attention to the quotes embedded in <code>$var</code>,\nyou have to use <code>eval</code>:</p>\n\n<pre><code>    $ eval ls -Fltr $var\n    ./my dir:\n    total 0\n    -rw-r--r--   1 jleffler  staff  0 Nov  1 14:55 my file\n\n    ./anotherdir:\n    total 0\n    -rw-r--r--   1 jleffler  staff  0 Nov  1 14:55 myfile\n    $ \n</code></pre>\n\n<p>This gets really tricky when you have file names such as \"<code>He said,\n\"Don't do this!\"</code>\" (with quotes and double quotes and spaces).</p>\n\n<pre><code>    $ cp /dev/null \"He said, \\\"Don't do this!\\\"\"\n    $ ls\n    He said, \"Don't do this!\"       anotherdir                      my dir\n    $ ls -l\n    total 0\n    -rw-r--r--   1 jleffler  staff    0 Nov  1 15:54 He said, \"Don't do this!\"\n    drwxr-xr-x   3 jleffler  staff  102 Nov  1 14:55 anotherdir\n    drwxr-xr-x   3 jleffler  staff  102 Nov  1 14:55 my dir\n    $ \n</code></pre>\n\n<p>The shells (all of them) do not make it particularly easy to handle such\nstuff, so (funnily enough) many Unix programs do not do a good job of\nhandling them.\nOn Unix, a filename (single component) can contain any characters except\nslash and NUL <code>'\\0'</code>.\nHowever, the shells strongly encourage no spaces or newlines or tabs\nanywhere in a path names.\nIt is also why standard Unix file names do not contain spaces, etc.</p>\n\n<p>When dealing with file names that may contain spaces and other\ntroublesome characters, you have to be extremely careful, and I found\nlong ago that I needed a program that is not standard on Unix.\nI call it <code>escape</code> (version 1.1 was dated 1989-08-23T16:01:45Z).</p>\n\n<p>Here is an example of <code>escape</code> in use - with the SCCS control system.\nIt is a cover script that does both a <code>delta</code> (think <em>check-in</em>) and a\n<code>get</code> (think <em>check-out</em>).\nVarious arguments, especially <code>-y</code> (the reason why you made the change)\nwould contain blanks and newlines.\nNote that the script dates from 1992, so it uses back-ticks instead of\n<code>$(cmd ...)</code> notation and does not use <code>#!/bin/sh</code> on the first line.</p>\n\n<pre><code>:   \"@(#)$Id: delget.sh,v 1.8 1992/12/29 10:46:21 jl Exp $\"\n#\n#   Delta and get files\n#   Uses escape to allow for all weird combinations of quotes in arguments\n\ncase `basename $0 .sh` in\ndeledit)    eflag=\"-e\";;\nesac\n\nsflag=\"-s\"\nfor arg in \"$@\"\ndo\n    case \"$arg\" in\n    -r*)    gargs=\"$gargs `escape \\\"$arg\\\"`\"\n            dargs=\"$dargs `escape \\\"$arg\\\"`\"\n            ;;\n    -e)     gargs=\"$gargs `escape \\\"$arg\\\"`\"\n            sflag=\"\"\n            eflag=\"\"\n            ;;\n    -*)     dargs=\"$dargs `escape \\\"$arg\\\"`\"\n            ;;\n    *)      gargs=\"$gargs `escape \\\"$arg\\\"`\"\n            dargs=\"$dargs `escape \\\"$arg\\\"`\"\n            ;;\n    esac\ndone\n\neval delta \"$dargs\" &amp;&amp; eval get $eflag $sflag \"$gargs\"\n</code></pre>\n\n<p>(I would probably not use escape quite so thoroughly these days - it is\nnot needed with the <code>-e</code> argument, for example - but overall, this is\none of my simpler scripts using <code>escape</code>.)</p>\n\n<p>The <code>escape</code> program simply outputs its arguments, rather like <code>echo</code>\ndoes, but it ensures that the arguments are protected for use with\n<code>eval</code> (one level of <code>eval</code>; I do have a program which did remote shell\nexecution, and that needed to escape the output of <code>escape</code>).</p>\n\n<pre><code>    $ escape $var\n    '\"./my' 'dir\"' '\"./anotherdir\"'\n    $ escape \"$var\"\n    '\"./my dir\" \"./anotherdir\"'\n    $ escape x y z\n    x y z\n    $ \n</code></pre>\n\n<p>I have another program called <code>al</code> that lists its arguments one per line\n(and it is even more ancient: version 1.1 dated 1987-01-27T14:35:49).\nIt is most useful when debugging scripts, as it can be plugged into a\ncommand line to see what arguments are actually passed to the command.</p>\n\n<pre><code>    $ echo \"$var\"\n    \"./my dir\" \"./anotherdir\"\n    $ al $var\n    \"./my\n    dir\"\n    \"./anotherdir\"\n    $ al \"$var\"\n    \"./my dir\" \"./anotherdir\"\n    $\n</code></pre>\n\n<p>[<em>Added:</em>\nAnd now to show the difference between the various <code>\"$@\"</code> notations, here is one more example:</p>\n\n<pre><code>$ cat xx.sh\nset -x\nal $@\nal $*\nal \"$*\"\nal \"$@\"\n$ sh xx.sh     *      */*\n+ al He said, '\"Don'\\''t' do 'this!\"' anotherdir my dir xx.sh anotherdir/myfile my dir/my file\nHe\nsaid,\n\"Don't\ndo\nthis!\"\nanotherdir\nmy\ndir\nxx.sh\nanotherdir/myfile\nmy\ndir/my\nfile\n+ al He said, '\"Don'\\''t' do 'this!\"' anotherdir my dir xx.sh anotherdir/myfile my dir/my file\nHe\nsaid,\n\"Don't\ndo\nthis!\"\nanotherdir\nmy\ndir\nxx.sh\nanotherdir/myfile\nmy\ndir/my\nfile\n+ al 'He said, \"Don'\\''t do this!\" anotherdir my dir xx.sh anotherdir/myfile my dir/my file'\nHe said, \"Don't do this!\" anotherdir my dir xx.sh anotherdir/myfile my dir/my file\n+ al 'He said, \"Don'\\''t do this!\"' anotherdir 'my dir' xx.sh anotherdir/myfile 'my dir/my file'\nHe said, \"Don't do this!\"\nanotherdir\nmy dir\nxx.sh\nanotherdir/myfile\nmy dir/my file\n$\n</code></pre>\n\n<p>Notice that nothing preserves the original blanks between the <code>*</code> and <code>*/*</code> on the command line.  Also, note that you can change the 'command line arguments' in the shell by using:</p>\n\n<pre><code>set -- -new -opt and \"arg with space\"\n</code></pre>\n\n<p>This sets 4 options, '<code>-new</code>', '<code>-opt</code>', '<code>and</code>', and '<code>arg with space</code>'.\n<br>\n]</p>\n\n<p>Hmm, that's quite a long <em>answer</em> - perhaps <em>exegesis</em> is the better term.\nSource code for <code>escape</code> available on request (email to firstname dot\nlastname at gmail dot com).\nThe source code for <code>al</code> is incredibly simple:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main(int argc, char **argv)\n{\n    while (*++argv != 0)\n        puts(*argv);\n    return(0);\n}\n</code></pre>\n\n<p>That's all.  It is equivalent to the <code>test.sh</code> script that Robert Gamble showed, and could be written as a shell function (but shell functions didn't exist in the local version of Bourne shell when I first wrote <code>al</code>).</p>\n\n<p>Also note that you can write <code>al</code> as a simple shell script:</p>\n\n<pre><code>[ $# != 0 ] &amp;&amp; printf \"%s\\n\" \"$@\"\n</code></pre>\n\n<p>The conditional is needed so that it produces no output when passed no arguments.  The <code>printf</code> command will produce a blank line with only the format string argument, but the C program produces nothing.</p>\n",
    "questionId": 255898
  },
  {
    "type": "answer",
    "id": 1987331,
    "htmlBody": "<p>Note that Robert's answer is correct, and it works in <code>sh</code> as well.  You can (portably) simplify it even further:</p>\n\n<pre><code>for i in \"$@\"\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>for i\n</code></pre>\n\n<p>I.e., you don't need anything!</p>\n\n<p>Testing (<code>$</code> is command prompt):</p>\n\n<pre><code>$ set a b \"spaces here\" d\n$ for i; do echo \"$i\"; done\na\nb\nspaces here\nd\n$ for i in \"$@\"; do echo \"$i\"; done\na\nb\nspaces here\nd\n</code></pre>\n\n<p>I first read about this in <em>Unix Programming Environment</em> by Kernighan and Pike.</p>\n\n<p>In <code>bash</code>, <code>help for</code> documents this:</p>\n\n<blockquote>\n  <p><code>for NAME [in WORDS ... ;] do COMMANDS; done</code></p>\n  \n  <p>If <code>'in WORDS ...;'</code> is not present, then <code>'in \"$@\"'</code> is assumed.</p>\n</blockquote>\n",
    "questionId": 255898
  },
  {
    "type": "question",
    "id": 2745206,
    "htmlBody": "<p>I'm getting results from a database and want to output the data as a table in Java's standard output</p>\n\n<p>I've tried using \\t but the first column I want is very variable in length.</p>\n\n<p>Is there a way to display this in a nice table like output?</p>\n",
    "title": "Output in a table format in Java's System.out"
  },
  {
    "type": "answer",
    "id": 2745239,
    "htmlBody": "<p>Use <a href=\"http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#format(java.lang.String,%20java.lang.Object...)\" rel=\"noreferrer\" title=\"format(String, Object...)\"><code>System.out.format</code></a> . You can set lengths of fields like this:</p>\n\n<pre><code>System.out.format(\"%32s%10d%16s\", string1, int1, string2);\n</code></pre>\n\n<p>This pads <code>string1</code>, <code>int1</code>, and <code>string2</code> to 32, 10, and 16 characters, respectively.</p>\n\n<p>See the Javadocs for <a href=\"http://java.sun.com/javase/6/docs/api/java/util/Formatter.html\" rel=\"noreferrer\"><code>java.util.Formatter</code></a> for more information on the syntax (<code>System.out.format</code> uses a <code>Formatter</code> internally).</p>\n",
    "questionId": 2745206
  }
]
